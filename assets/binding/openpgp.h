/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"
#include <stdint.h>
typedef struct { char *publicKey; char *privateKey; } KeyPair;
typedef struct { char *hash; char *cipher; char *compression; char *compressionLevel; char *rsaBits; } KeyOptions;
typedef struct { char *name; char *comment; char *email; char *passphrase; KeyOptions *keyOptions; } Options;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* Encrypt(char* message, char* publicKey);

/* Return type for EncryptBytes */
struct EncryptBytes_return {
	void* r0;
	int r1;
};
extern struct EncryptBytes_return EncryptBytes(void* message, int messageSize, char* publicKey);
extern char* Decrypt(char* message, char* privateKey, char* passphrase);

/* Return type for DecryptBytes */
struct DecryptBytes_return {
	void* r0;
	int r1;
};
extern struct DecryptBytes_return DecryptBytes(void* message, int messageSize, char* privateKey, char* passphrase);
extern char* Sign(char* message, char* publicKey, char* privateKey, char* passphrase);

/* Return type for SignBytes */
struct SignBytes_return {
	void* r0;
	int r1;
};
extern struct SignBytes_return SignBytes(void* message, int messageSize, char* publicKey, char* privateKey, char* passphrase);
extern char* SignBytesToString(void* message, int messageSize, char* publicKey, char* privateKey, char* passphrase);
extern char* Verify(char* signature, char* message, char* publicKey);
extern char* VerifyBytes(char* signature, void* message, int messageSize, char* publicKey);
extern char* EncryptSymmetric(char* message, char* passphrase, KeyOptions* options);

/* Return type for EncryptSymmetricBytes */
struct EncryptSymmetricBytes_return {
	void* r0;
	int r1;
};
extern struct EncryptSymmetricBytes_return EncryptSymmetricBytes(void* message, int messageSize, char* passphrase, KeyOptions* options);
extern char* DecryptSymmetric(char* message, char* passphrase, KeyOptions* options);

/* Return type for DecryptSymmetricBytes */
struct DecryptSymmetricBytes_return {
	void* r0;
	int r1;
};
extern struct DecryptSymmetricBytes_return DecryptSymmetricBytes(void* message, int messageSize, char* passphrase, KeyOptions* options);
extern void* Generate(Options* options);

#ifdef __cplusplus
}
#endif
